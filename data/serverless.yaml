service: data

configValidationMode: error

package:
  individually: true
  patterns:
    - '!README.md'

provider:
  name: aws
  stage: dev
  region: us-east-1
  runtime: python3.11
  timeout: 10
  iam:
    role:
      statements:
        - Effect: Allow
          Action: 
            - 'athena:StartQueryExecution'
            - 'athena:GetQueryExecution'
          Resource: '*'
        - Effect: Allow
          Action:
            - 's3:*'
          Resource: '*'
            # Fn::Join:
            #   - ''
            #   - - "arn:aws:s3:::"
            #     - "Ref" : "${cf:collections-dev.CollectionsBucket}"
            #     - '-athena-results/*'
        - Effect: Allow
          Action:
            - 'glue:*'
            #- 'glue:GetDatabase'
            #- 'glue:GetTables'
          Resource: '*'

custom:
  stage: ${opt:stage, self:provider.stage}

resources:
  Parameters: 
    CollectionsBucketName: 
      Type: String
      Default: ${cf:collections-dev.CollectionsBucket}
      Description: The name of the S3 bucket containing the generated Parquet files
  Resources:
    GlueCrawlerRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - glue.amazonaws.com
              Action:
                - sts:AssumeRole
        ManagedPolicyArns:
          - !Sub "arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole"
        Policies:
          - PolicyName: GlueCrawlerPolicy
            PolicyDocument:
              Statement:
                - Effect: Allow
                  Action:
                    - s3:GetObject
                    - s3:ListBucket
                  Resource:
                    - !Join ["", ["arn:aws:s3:::", !Ref CollectionsBucketName, "/*"]]
                    - !Join ["", ["arn:aws:s3:::", !Ref CollectionsBucketName]]
                - Effect: Allow
                  Action:
                    - athena:StartQueryExecution
                  Resource:
                    !Sub "arn:aws:athena:${AWS::Region}:${AWS::AccountId}:workgroup/${AthenaWorkgroup}"
                  Condition:
                    StringEquals:
                      workgroup: !Ref AthenaWorkgroup
    GlueDatabase:
      Type: AWS::Glue::Database
      Properties:
        CatalogId: !Ref AWS::AccountId
        DatabaseInput:
          Name: data-${self:custom.stage}-db
    GlueCrawler:
      Type: AWS::Glue::Crawler
      Properties:
        Role: !Ref GlueCrawlerRole
        DatabaseName: !Ref GlueDatabase
        Name: data-${self:custom.stage}-crawler
        Targets:
          S3Targets:
            - Path: !Sub "s3://${CollectionsBucketName}/"
        Schedule: 
          ScheduleExpression:  "cron(0 0 ? * * *)"
        Configuration: "{\"Version\":1.0,\"CrawlerOutput\":{\"Partitions\":{\"AddOrUpdateBehavior\":\"InheritFromTable\"},\"Tables\":{\"AddOrUpdateBehavior\":\"MergeNewColumns\"}}}"
    AthenaWorkgroup:
      Type: AWS::Athena::WorkGroup
      Properties:
        Name: data-${self:custom.stage}-workgroup
        Description: "Data workgroup for Athena queries for data-${self:custom.stage}"
        WorkGroupConfiguration:
          ResultConfiguration:
            OutputLocation: !Sub "s3://${CollectionsBucketName}-athena-results/"
        Tags:
          - Key: "purpose"
            Value: "data lambda"
  Outputs:
    GlueDatabaseName:
      Description: Name of the Glue Database
      Value: !Ref GlueDatabase
    AthenaWorkgroupName:
      Description: Name of the Athena Workgroup
      Value: !Ref AthenaWorkgroup
functions:
  myFunction:
    handler: handler.handler
    layers:
      - arn:aws:lambda:${self:provider.region}:336392948345:layer:AWSSDKPandas-Python311:8
    environment:
      RESULTS_BUCKET_NAME: !Sub "${CollectionsBucketName}-athena-results"
      GLUE_DATABASE_NAME: !Ref GlueDatabase
      ATHENA_WORKGROUP_NAME: !Ref AthenaWorkgroup
      GLUE_TABLE_NAME: ${cf:collections-dev.CollectionsBucketUnderscore}


